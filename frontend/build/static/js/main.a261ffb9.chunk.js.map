{"version":3,"sources":["components/AppNavBar.js","components/posts.js","components/NewPost.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","state","isOpen","toggle","bind","this","setState","Navbar","color","dark","expand","NavbarBrand","tag","Link","to","NavItem","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavLink","href","Component","Posts","posts","isLoading","upvote","fetch","then","res","json","data","catch","console","log","id","requestOptions","method","headers","reason","k","length","Spinner","postlist","map","post","index","key","user","Moment","date","format","Col","sm","body","style","backgroundColor","CardText","text","upvotes","Button","NewPost","redirectToList","handleChange","handleSubmit","event","target","value","name","preventDefault","exact","component","Container","align","Form","onSubmit","FormGroup","Label","for","Input","placeholder","type","onChange","size","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a261ffb9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\n class AppNavbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {isOpen: false};\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarBrand tag={Link} to=\"/\">Posts</NavbarBrand>\n            <NavItem tag={Link} to=\"/new\">Fazer Novo Post</NavItem>\n            <NavbarToggler onClick={this.toggle}/>\n            <Collapse isOpen={this.state.isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar>\n                    <NavItem>\n                        <NavLink\n                            href=\"https://twitter.com/faamk\">@faamk</NavLink>\n                    </NavItem>\n                </Nav>\n            </Collapse>\n        </Navbar>;\n    }\n}export default AppNavbar","import React, {Component} from 'react'\nimport AppNavbar from \"./AppNavBar\";\nimport {Button, CardText, Col, Spinner} from \"reactstrap\";\nimport Moment from 'moment';\nimport {blue} from \"color-name\";\n\nclass Posts extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {posts: [], isLoading: true};\n        this.upvote = this.upvote.bind(this)\n    }\n\n    componentDidMount() {\n        this.setState({isLoading: true});\n        fetch('/posts')\n            .then(res => res.json())\n            .then((data) => {\n                this.setState({posts: data, isLoading: false})\n            })\n            .catch(console.log)\n    }\n\n    async upvote(id) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n        };\n        await fetch('/upvote?id=' + id, requestOptions)\n            .catch(reason => console.log(reason))\n            .then(() => {\n                let json = this.state.posts\n                for (var k = 0; k < json.length; ++k) {\n                    if (id === json[k]['id']) {\n                        json[k]['upvotes'] = json[k]['upvotes'] + 1;\n                    }\n                }\n                this.setState({posts: json})\n            })\n\n    }\n\n    render() {\n        const {posts, isLoading} = this.state;\n\n        if (isLoading) {\n            return (<div>\n                    <AppNavbar/>\n                    <Spinner color=\"primary\" />\n            </div>\n            )\n        }\n        if (posts.length===0) {\n            return (<div>\n                    <AppNavbar/>\n                    <p>Sem Posts para mostrar :(</p>\n                </div>\n            )\n        }\n        else {\n            const postlist = posts.map((post,index) => (\n                <div className=\"card\" key={index}>\n                    <div className=\"card-body\">\n                        <h5 >{post.user}</h5>\n                        <label >Ã s {Moment(post.date).format(' h:mm:ss a, DD/MM/YYYY')}:</label>\n                        <Col sm=\"6\">\n                        <card  body style={{backgroundColor:'#878787'}}>\n                            <CardText style={{ color: 'white' }}>{post.text}</CardText>\n                        </card>\n                        </Col>\n                        <h5>Upvotes: {post.upvotes}</h5>\n                        <Button onClick={() => this.upvote(post.id)}>Upvote</Button>\n                    </div>\n                </div>\n            ))\n\n            return (<div>\n                    <AppNavbar/>\n                    {postlist}\n                </div>\n            )\n        }\n\n\n    }\n}\n\nexport default Posts;\n\n\n","import React,{Component} from \"react\";\nimport AppNavbar from './AppNavBar'\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport {Redirect} from \"react-router-dom\";\nimport Posts from \"./posts\";\nclass NewPost extends Component{\n\n    post={\n        user:'',\n        text:'',\n        redirectToList:false\n    }\n\n\n    constructor(props) {\n        super(props);\n        this.state = {post: this.post};\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let post = {...this.state.post};\n        post[name] = value;\n        this.setState({post});\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault();\n        const {post} = this.state;\n\n         await fetch('/post?user='+post.user+'&text='+post.text, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        });\n        this.setState(()=> ({redirectToList: true}))\n    }\n\n    render() {\n        const {post} = this.state\n        const{redirectToList} =this.state\n        if(redirectToList === true){\n            return <Redirect to='/' exact={true} component={Posts}/>\n        }\n\n        return  <div>\n            <AppNavbar/>\n            <Container>\n                <h1 align='center'>Adicionar Post</h1>\n                <Form onSubmit={this.handleSubmit}>\n                    <div>\n                    <FormGroup>\n                        <Label for=\"user\">UsuÃ¡rio:</Label>\n                        <Input placeholder=\"Nome do UsuÃ¡rio\" type=\"text\" name=\"user\" id=\"user\" value={post.user || ''}\n                               onChange={this.handleChange}/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"text\">Texto:</Label>\n                        <Input placeholder=\"Texto do Post\" type=\"text\" name=\"text\" size={300} id=\"text\" value={post.text || ''}\n                               onChange={this.handleChange}/>\n                    </FormGroup>\n                    </div>\n                    <FormGroup>\n                        <Button color=\"primary\" type=\"submit\">Salvar</Button>{' '}\n                    </FormGroup>\n                </Form>\n            </Container>\n        </div>;\n    }\n} export default NewPost;","import React, {Component} from 'react';\nimport Posts from './components/posts';\nimport NewPost from './components/NewPost';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nclass App extends Component {\n    render () {\n    return (\n        <Router>\n            <Switch>\n                <Route path='/' exact={true} component={Posts}/>\n                <Route path='/new' exact={true} component={NewPost}/>>\n            </Switch>\n        </Router>\n    );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}