{"ast":null,"code":"var _jsxFileName = \"/home/fabrizio/WebstormProjects/front_upvote/src/components/posts.js\";\nimport React, { Component } from 'react';\nimport AppNavbar from \"./AppNavBar\";\nimport { Button } from \"reactstrap\";\nimport Moment from 'moment';\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      isLoading: true\n    };\n    this.upvote = this.upvote.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n    fetch('/posts').then(res => res.json()).then(data => {\n      this.setState({\n        posts: data,\n        isLoading: false\n      });\n    }).catch(console.log);\n  }\n\n  async upvote(id) {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    await fetch('/upvote?id=' + id, requestOptions).catch(reason => console.log(reason)).then(() => {\n      let json = this.state.posts;\n\n      for (var k = 0; k < json.length; ++k) {\n        if (id === json[k]['id']) {\n          json[k]['upvotes'] = json[k]['upvotes'] + 1;\n        }\n      }\n\n      this.setState({\n        posts: json\n      });\n    });\n  }\n\n  render() {\n    const {\n      posts,\n      isLoading\n    } = this.state;\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(AppNavbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }\n      }, \"Loading...\"));\n    }\n\n    if (posts.length === 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(AppNavbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }\n      }, \"Sem Posts para mostrar :(\"));\n    } else {\n      const postlist = posts.map((post, index) => /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }\n      }, post.user), /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }\n      }, \"\\xE0s \", Moment(post.date).format(' h:mm:ss a, MMMM Do YYYY,')), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }\n      }, post.text), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }\n      }, \"Upvotes: \", post.upvotes), /*#__PURE__*/React.createElement(Button, {\n        onClick: () => this.upvote(post.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }\n      }, \"Upvote\"))));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(AppNavbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }\n      }), postlist);\n    }\n  }\n\n}\n\nexport default Posts;","map":{"version":3,"sources":["/home/fabrizio/WebstormProjects/front_upvote/src/components/posts.js"],"names":["React","Component","AppNavbar","Button","Moment","Posts","constructor","props","state","posts","isLoading","upvote","bind","componentDidMount","setState","fetch","then","res","json","data","catch","console","log","id","requestOptions","method","headers","reason","k","length","render","postlist","map","post","index","user","date","format","text","upvotes"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport AppNavbar from \"./AppNavBar\";\nimport {Button} from \"reactstrap\";\nimport Moment from 'moment';\n\nclass Posts extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {posts: [], isLoading: true};\n        this.upvote = this.upvote.bind(this)\n    }\n\n    componentDidMount() {\n        this.setState({isLoading: true});\n        fetch('/posts')\n            .then(res => res.json())\n            .then((data) => {\n                this.setState({posts: data, isLoading: false})\n            })\n            .catch(console.log)\n    }\n\n    async upvote(id) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n        };\n        await fetch('/upvote?id=' + id, requestOptions)\n            .catch(reason => console.log(reason))\n            .then(() => {\n                let json = this.state.posts\n                for (var k = 0; k < json.length; ++k) {\n                    if (id === json[k]['id']) {\n                        json[k]['upvotes'] = json[k]['upvotes'] + 1;\n                    }\n                }\n                this.setState({posts: json})\n            })\n\n    }\n\n    render() {\n        const {posts, isLoading} = this.state;\n\n        if (isLoading) {\n            return (<div>\n                    <AppNavbar/>\n                    <p>Loading...</p>\n                </div>\n            )\n        }\n        if (posts.length===0) {\n            return (<div>\n                    <AppNavbar/>\n                    <p>Sem Posts para mostrar :(</p>\n                </div>\n            )\n        }\n        else {\n            const postlist = posts.map((post,index) => (\n                <div className=\"card\" key={index}>\n                    <div className=\"card-body\">\n                        <h5 >{post.user}</h5>\n                        <label >Ã s {Moment(post.date).format(' h:mm:ss a, MMMM Do YYYY,')}</label>\n                        <p>{post.text}</p>\n                        <h5>Upvotes: {post.upvotes}</h5>\n                        <Button onClick={() => this.upvote(post.id)}>Upvote</Button>\n                    </div>\n                </div>\n            ))\n\n            return (<div>\n                    <AppNavbar/>\n                    {postlist}\n                </div>\n            )\n        }\n\n\n    }\n}\n\nexport default Posts;\n\n\n"]},"metadata":{},"sourceType":"module"}